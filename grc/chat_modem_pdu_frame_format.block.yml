id: chat_modem_pdu_frame_format
label: pdu_frame_format
category: '[chat_modem]'

templates:
  imports: import chat_modem
  make: chat_modem.pdu_frame_format(${packet_len}, ${sync_word}, ${repeat})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: packet_len
  label: packet_len
  dtype: int
- id: sync_word
  label: sync_word
  dtype: int
- id: repeat
  label: repeat
  dtype: int

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- id: msg_in
  label: msg_in
  domain: message
- id: en
  label: en
  domain: message

outputs:
- label: msg_out
  domain: message

documentation: |+
  Input (for msg_in port):
    expected packed np.uint8 (GNU Radio byte) converted to PDU 
  Output: 
    Message with packet_len bits with last bits being sync_word. Outputs idle frame (zeros with sync_word) every time anything
    is recieved on en port. Every time there is message on msg_in, idle frame output is stopped and data frame is outputed. Payload is
    padded with n*0 so frame (data on msg_in , n*[0], sync_word) is of length packet_len.

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1